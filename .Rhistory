ggplot2::geom_line(ggplot2::aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
ggplot2::geom_line(ggplot2::aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
ggplot2::scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
ggplot2::scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggplot2::ggtitle(paste("Gains chart")) +
ggplot2::theme(plot.title = ggplot2::element_text(size = 20)) +
ggplot2::theme(legend.position="top")
plot_input %>%
dplyr::filter(category==targetcat) %>%
ggplot2::ggplot(ggplot2::aes(x=decile,y=cumgain, colour=dataset)) +
ggplot2::geom_line() +
ggplot2::geom_line(ggplot2::aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
ggplot2::geom_line(ggplot2::aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
ggplot2::scale_x_continuous(name="decile", breaks=0:10, labels=0:10) +
ggplot2::scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggplot2::ggtitle(paste("Gains chart")) +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(size = 20,hjust = 0.5)) +
ggplot2::theme(legend.position="top",
panel.grid.minor.x = ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_line( linetype=3,size=.1, color="lightgray"))
library(modelplotr)
train
extval <- train
dataprep_modevalplots(datasets = list("extval"))
dataprep_modevalplots(datasets = list("extval"),targetname="species")
dataprep_modevalplots(datasets = list("extval"),modelname = "clf",targetname="species")
dataprep_modevalplots(datasets = list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
input_modevalplots()
extval <- test
dataprep_modevalplots(datasets=list("extval"),targetname="species")
eval_tot
input_modevalplots()
eval_t_tot
library(modelplotr)
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
head(eval_tot)
library(modelplotr)
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
head(eval_tot)
library(modelplotr)
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
head(eval_tot)
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
modelname = "clf",
modellabel = "random forest",
targetname="species")
head(eval_tot)
datasets = list("train","test")
match("train",datasets)
match("test",datasets)
library(modelplotr)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
modelname = "clf",
modellabel = "random forest",
targetname="species")
head(eval_tot)
library(modelplotr)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
modelname = "clf",
modellabel = "random forest",
targetname="species")
head(eval_tot)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
modelname = "clf",
modellabel = "random forest",
targetname="species")
head(eval_tot)
library(modelplotr)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
modelname = "clf",
modellabel = "random forest",
targetname="species")
head(eval_tot)
match(dataset,datasets)
library(modelplotr)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
modelname = "clf",
modellabel = "random forest",
targetname="species")
head(eval_tot)
dataset = 1
datasets = list(1,2)
Position(dataset,datasets)
match(dataset,datasets)
datasetlabels[match(dataset,datasets)]
datasetlabels = list('a','b')
datasetlabels[match(dataset,datasets)]
datasetlabels[match(dataset,datasets)][1]
dataset = 1
datasets = list(1,2)
datasetlabels = list('a','b')
(datasetlabels[match(dataset,datasets)])
datasetlabels[match(dataset,datasets)][1][1]
unlist(datasetlabels[match(dataset,datasets)])
library(modelplotr)
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
modelname = "clf",
modellabel = "random forest",
targetname="species")
head(eval_tot)
eval_t_tot
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
head(eval_tot)
library(modelplotr)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
modelnames = list("clf"),
modellabels = list("random forest"),
targetname="species")
head(eval_tot)
library(modelplotr)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
modelnames = list("clf"),
modellabels = list("random forest"),
targetname="species")
head(eval_tot)
Q
Q
Q
library(modelplotr)
library(modelplotr)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
modelnames = list("clf"),
modellabels = list("random forest"),
targetname="species")
head(eval_tot)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
models = list("clf"),
modellabels = list("random forest"),
targetname="species")
head(eval_tot)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
models = list("clf"),
modellabels = list("random forest"),
targetname="species")
head(eval_tot)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
models = list("clf"),
modellabels = list("random forest"),
targetname="species")
head(eval_tot)
library(modelplotr)
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
models = list("clf"),
modellabels = list("random forest"),
targetname="species")
head(eval_tot)
input_modevalplots()
head(eval_t_tot)
cumgains <- cumgains()
lift <- lift()
response <- response()
cumresponse <- cumresponse()
multiplot(cumgains,lift,response,cumresponse,cols=2)
library(modelplotr)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
rf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
mnl <- nnet::multinom(species ~ ., data = train)
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
models = list("rf","mnl"),
modellabels = list("random forest","multinomial logit"),
targetname="species")
head(eval_tot)
tail(eval_tot)
input_modevalplots()
tail(eval_t_tot)
library(modelplotr)
prepared_input=eval_t_tot
unique(prepared_input$modelname)[1]
library(modelplotr)
library(modelplotr)
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
rf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
mnl <- nnet::multinom(species ~ ., data = train)
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
models = list("rf","mnl"),
modellabels = list("random forest","multinomial logit"),
targetname="species")
head(eval_tot)
tail(eval_tot)
input_modevalplots()
head(eval_t_tot)
tail(eval_t_tot)
scope_modevalplots(eval_type="CompareTrainTest")
eval_t_tot
prepared_input=eval_t_tot
unique(prepared_input$modelname)[1]
select_model <- unique(prepared_input$modelname)[1]
select_model
library(modelplotr)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
rf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
mnl <- nnet::multinom(species ~ ., data = train)
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
models = list("rf","mnl"),
modellabels = list("random forest","multinomial logit"),
targetname="species")
head(eval_tot)
tail(eval_tot)
input_modevalplots()
head(eval_t_tot)
tail(eval_t_tot)
scope_modevalplots(eval_type="CompareTrainTest")
eval_t_tot %>% filter(modelname == "random forest")
eval_t_tot %>% filter(modelname == "random forest")
eval_t_tot %>% dplyr::filter(modelname == "random forest")
eval_t_tot %>% tidyverse::filter(modelname == "random forest")
library(modelplotr)
library(modelplotr)
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
rf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
mnl <- nnet::multinom(species ~ ., data = train)
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
models = list("rf","mnl"),
modellabels = list("random forest","multinomial logit"),
targetname="species")
head(eval_tot)
tail(eval_tot)
input_modevalplots()
head(eval_t_tot)
tail(eval_t_tot)
scope_modevalplots(eval_type="CompareTrainTest")
library(modelplotr)
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
rf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
mnl <- nnet::multinom(species ~ ., data = train)
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
models = list("rf","mnl"),
modellabels = list("random forest","multinomial logit"),
targetname="species")
head(eval_tot)
tail(eval_tot)
input_modevalplots()
head(eval_t_tot)
tail(eval_t_tot)
scope_modevalplots(eval_type="CompareTrainTest")
head(eval_t_type)
tail(eval_t_type)
library(modelplotr)
library(modelplotr)
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
rf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
mnl <- nnet::multinom(species ~ ., data = train)
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
models = list("rf","mnl"),
modellabels = list("random forest","multinomial logit"),
targetname="species")
head(eval_tot)
tail(eval_tot)
input_modevalplots()
head(eval_t_tot)
tail(eval_t_tot)
scope_modevalplots(eval_type="CompareTrainTest")
head(eval_t_type)
library(modelplotr)
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
rf <- randomForest::randomForest(species ~ ., data=train, importance = T,ntree=5)
mnl <- nnet::multinom(species ~ ., data = train)
dataprep_modevalplots(datasets=list("train","test"),
datasetlabels = list("train data","test data"),
models = list("rf","mnl"),
modellabels = list("random forest","multinomial logit"),
targetname="species")
head(eval_tot)
tail(eval_tot)
input_modevalplots()
head(eval_t_tot)
tail(eval_t_tot)
scope_modevalplots(eval_type="CompareTrainTest")
head(eval_t_type)
tail(eval_t_type)
cumgains <- cumgains()
cumgains
scope_modevalplots(eval_type="bla")
scope_modevalplots(eval_type="CompareModels")
head(eval_t_type)
cumgains <- cumgains()
cumgains
scope_modevalplots(eval_type="TargetValues")
cumgains <- cumgains()
cumgains
library(modelplotr)
