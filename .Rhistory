tot=n(),
pct=1.0*sum(y_true==category)/n()) %>%
group_by_("dataset","category") %>%
mutate(negtot=sum(neg),
postot=sum(pos),
tottot=sum(tot),
pcttot=1.0*sum(pos)/sum(tot)) %>%
group_by_("dataset","category","negtot","postot","tottot","pcttot") %>%
mutate(cumneg=cumsum(neg),
cumpos=cumsum(pos),
cumtot=cumsum(tot),
cumpct=1.0*cumsum(pos)/cumsum(tot),
gain=pos/postot,
cumgain=cumsum(pos)/postot,
gain_ref=decile/10,
gain_opt=ifelse(decile>=ceiling(10*pcttot),1,(decile/10)/(ceiling(10*pcttot)/10)),
lift=pct/pcttot,
cumlift=1.0*cumsum(pos)/cumsum(tot)/pcttot,
cumlift_ref = 1) %>%
as.data.frame()
eval_t_tot = rbind(eval_t_tot,eval_t_zero,eval_t_add)
eval_t_tot = eval_t_tot[with(eval_t_tot,order(category,dataset,decile)),]
}
eval_t_tot <<- eval_t_tot
}
input_modevalplots()
input_modevalplots <- function(eval_tot="eval_tot"){
# check if eval_tot exists, otherwise create
if (!(exists("eval_tot"))) dataprep_modevalplots()
eval_tot2 <- get(eval_tot)
modelgroups = levels(eval_tot2$dataset)
yvals = levels(eval_tot2$y_true)
eval_t_tot = data.frame()
for (val in yvals) {
eval_t_zero = eval_tot %>%
mutate("category"=val,"decile"=0) %>%
group_by_("dataset","category","decile") %>%
summarize(neg=0,
pos=0,
tot=0,
pct=NA,
negtot=NA,
postot=NA,
tottot=NA,
pcttot=NA,
cumneg=0,
cumpos=0,
cumtot=0,
cumpct=NA,
gain=0,
cumgain=0,
gain_ref=0,
gain_opt=0,
lift=NA,
cumlift=NA,
cumlift_ref = 1) %>%
as.data.frame()
eval_t_add = eval_tot %>%
mutate("category"=val,"decile"=get(paste0("dcl_",val))) %>%
group_by_("dataset","category","decile") %>%
summarize(neg=sum(y_true!=category),
pos=sum(y_true==category),
tot=n(),
pct=1.0*sum(y_true==category)/n()) %>%
group_by_("dataset","category") %>%
mutate(negtot=sum(neg),
postot=sum(pos),
tottot=sum(tot),
pcttot=1.0*sum(pos)/sum(tot)) %>%
group_by_("dataset","category","negtot","postot","tottot","pcttot") %>%
mutate(cumneg=cumsum(neg),
cumpos=cumsum(pos),
cumtot=cumsum(tot),
cumpct=1.0*cumsum(pos)/cumsum(tot),
gain=pos/postot,
cumgain=cumsum(pos)/postot,
gain_ref=decile/10,
gain_opt=ifelse(decile>=ceiling(10*pcttot),1,(decile/10)/(ceiling(10*pcttot)/10)),
lift=pct/pcttot,
cumlift=1.0*cumsum(pos)/cumsum(tot)/pcttot,
cumlift_ref = 1) %>%
as.data.frame()
eval_t_tot = rbind(eval_t_tot,eval_t_zero,eval_t_add)
eval_t_tot = eval_t_tot[with(eval_t_tot,order(category,dataset,decile)),]
}
eval_t_tot <<- eval_t_tot
}
input_modevalplots()
input_modevalplots <- function(prepared_input=eval_tot){
# check if eval_tot exists, otherwise create
if (!(exists("eval_tot"))) dataprep_modevalplots()
modelgroups = levels(prepared_input$dataset)
yvals = levels(prepared_input$y_true)
eval_t_tot = data.frame()
for (val in yvals) {
eval_t_zero = eval_tot %>%
mutate("category"=val,"decile"=0) %>%
group_by_("dataset","category","decile") %>%
summarize(neg=0,
pos=0,
tot=0,
pct=NA,
negtot=NA,
postot=NA,
tottot=NA,
pcttot=NA,
cumneg=0,
cumpos=0,
cumtot=0,
cumpct=NA,
gain=0,
cumgain=0,
gain_ref=0,
gain_opt=0,
lift=NA,
cumlift=NA,
cumlift_ref = 1) %>%
as.data.frame()
eval_t_add = eval_tot %>%
mutate("category"=val,"decile"=get(paste0("dcl_",val))) %>%
group_by_("dataset","category","decile") %>%
summarize(neg=sum(y_true!=category),
pos=sum(y_true==category),
tot=n(),
pct=1.0*sum(y_true==category)/n()) %>%
group_by_("dataset","category") %>%
mutate(negtot=sum(neg),
postot=sum(pos),
tottot=sum(tot),
pcttot=1.0*sum(pos)/sum(tot)) %>%
group_by_("dataset","category","negtot","postot","tottot","pcttot") %>%
mutate(cumneg=cumsum(neg),
cumpos=cumsum(pos),
cumtot=cumsum(tot),
cumpct=1.0*cumsum(pos)/cumsum(tot),
gain=pos/postot,
cumgain=cumsum(pos)/postot,
gain_ref=decile/10,
gain_opt=ifelse(decile>=ceiling(10*pcttot),1,(decile/10)/(ceiling(10*pcttot)/10)),
lift=pct/pcttot,
cumlift=1.0*cumsum(pos)/cumsum(tot)/pcttot,
cumlift_ref = 1) %>%
as.data.frame()
eval_t_tot = rbind(eval_t_tot,eval_t_zero,eval_t_add)
eval_t_tot = eval_t_tot[with(eval_t_tot,order(category,dataset,decile)),]
}
eval_t_tot <<- eval_t_tot
}
input_modevalplots()
cumgainsplot <- function(eval_t_tot=eval_t_tot,targetcat='setosa') {
p1 <<- eval_t_tot %>%
filter(category==targetcat) %>%
ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart",eval_t$modelomschrijving)) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top") %>%
plot(p1)
}
cumgainsplot()
eval_t_tot %>%
filter(category==targetcat) %>%
ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart",eval_t$modelomschrijving)) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
eval_t_tot %>%
filter_(category==targetcat) %>%
ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart",eval_t$modelomschrijving)) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
eval_t_tot %>%
filter_("category"==targetcat) %>%
ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart",eval_t$modelomschrijving)) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
targetcat='setosa'
eval_t_tot %>%
filter_("category"==targetcat) %>%
ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart",eval_t$modelomschrijving)) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
eval_t_tot %>%
filter_("category"==targetcat) %>%
ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart")) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
eval_t_tot %>%
filter_("category"==targetcat)
eval_t_tot %>%
filter(category==targetcat) %>%
ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart")) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
cumgainsplot <- function(eval_t_tot=eval_t_tot,targetcat='setosa') {
p1 <<- eval_t_tot %>%
filter(category==targetcat) %>%
ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart")) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top") %>%
plot(p1)
}
cumgainsplot()
cumgainsplot <- function(plot_input=eval_t_tot,targetcat='setosa') {
p1 <<- get(plot_input) %>%
filter_("category"==targetcat) %>%
ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart")) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top") %>%
plot(p1)
}
cumgainsplot()
cumgainsplot <- function(plot_input=eval_t_tot,targetcat='setosa') {
p1 <<- plot_input %>%
filter_("category"==targetcat) %>%
ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart")) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top") %>%
plot(p1)
}
cumgainsplot()
cumgainsplot <- function(plot_input=eval_t_tot,targetcat='setosa') {
p1 <<- plot_input %>%
filter_("category"==targetcat) %>%
ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart")) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
return(plot(p1))
}
cumgainsplot()
plot(p1)
plot_input=eval_t_tot
targetcat='setosa'
plot_input %>%
filter_("category"==targetcat)
plot_input
targetcat
plot_input %>%
filter_("category"==get(targetcat))
plot_input %>%
filter("category"==targetcat)
plot_input %>%
filter(category==targetcat)
cumgainsplot <- function(plot_input=eval_t_tot,targetcat='setosa') {
p1 <<- plot_input %>%
filter(category==targetcat) %>%
ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart")) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
return(plot(p1))
}
cumgainsplot()
liftplot <- function(plot_input=eval_t_tot,targetcat='setosa') {
liftplot <<- plot_input %>%
filter(category==targetcat & decile>0) %>%
ggplot(aes(x=decile,y=cumlift, colour=dataset)) +
geom_line() +
geom_hline(yintercept = 1,colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative lift") +
ggtitle(paste("Lift chart",eval_t$modelomschrijving)) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
return(plot(liftplot))
}
liftplot()
liftplot <- function(plot_input=eval_t_tot,targetcat='setosa') {
liftplot <<- plot_input %>%
filter(category==targetcat & decile>0) %>%
ggplot(aes(x=decile,y=cumlift, colour=dataset)) +
geom_line() +
geom_hline(yintercept = 1,colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative lift") +
ggtitle(paste("Lift chart")) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
return(plot(liftplot))
}
liftplot()
response <- function(plot_input=eval_t_tot,targetcat='setosa') {
response <<- plot_input %>%
filter(category==targetcat & decile>0) %>%
ggplot(aes(x=decile,y=pct, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=pcttot,colour=dataset),linetype=2) +
scale_x_discrete( name="decile", breaks=1:10, labels=1:10) +
scale_y_continuous(name="response",labels = scales::percent) +
ggtitle(paste("Response chart")) +
theme(plot.title = element_text(hjust = 0,size = 20)) +
theme(legend.position="top")
return(plot(response))
}
response()
cumresponse <- function(plot_input=eval_t_tot,targetcat='setosa') {
cumresponse <<- plot_input %>%
filter(category=='setosa'& decile>0) %>%
ggplot(aes(x=decile,y=cumpct, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=pcttot,colour=dataset),linetype=2) +
scale_x_discrete( name="decile", breaks=1:10, labels=1:10) +
scale_y_continuous(name="cumulative response",labels = scales::percent) +
ggtitle(paste("Cumulative response chart")) +
theme(plot.title = element_text(hjust = 0,size = 20)) +
theme(legend.position="top")
return(plot(cumresponse))
}
cumresponse()
multiplot(cumgains,lift,response,cumresponse,cols=2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(cumgains,lift,response,cumresponse,cols=2)
cumgains <- function(plot_input=eval_t_tot,targetcat='setosa') {
cumgains <<- plot_input %>%
filter(category==targetcat) %>%
ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart")) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
return(plot(cumgains))
}
cumgains()
multiplot(cumgains,lift,response,cumresponse,cols=2)
response <- function(plot_input=eval_t_tot,targetcat='setosa') {
response <<- plot_input %>%
filter(category==targetcat & decile>0) %>%
ggplot(aes(x=decile,y=pct, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=pcttot,colour=dataset),linetype=2) +
scale_x_discrete( name="decile", breaks=1:10, labels=1:10) +
scale_y_continuous(name="response",labels = scales::percent) +
ggtitle(paste("Response chart")) +
theme(plot.title = element_text(hjust = 0,size = 20)) +
theme(legend.position="top")
return(plot(response))
}
response()
multiplot(cumgains,lift,response,cumresponse,cols=2)
lift <- function(plot_input=eval_t_tot,targetcat='setosa') {
lift <<- plot_input %>%
filter(category==targetcat & decile>0) %>%
ggplot(aes(x=decile,y=cumlift, colour=dataset)) +
geom_line() +
geom_hline(yintercept = 1,colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative lift") +
ggtitle(paste("Lift chart")) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
return(plot(lift))
}
lift()
multiplot(cumgains,lift,response,cumresponse,cols=2)
devtools::load_all(".")
devtools::load_all(".")
iris_multiplotter()
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
clf <- randomForest:randomForest(species ~ ., data=train, importance = T)
train
clf <- randomForest::randomForest(species ~ ., data=train, importance = T)
iris_multiplotter <- function(){
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T)
# plot
dataprep_modevalplots(targetname="species")
input_modevalplots()
cumgains()
lift()
response()
cumresponse()
return(multiplot(cumgains,lift,response,cumresponse,cols=2))
}
iris_multiplotter()
cumgains()
lift()
cumgains <- function(plot_input=eval_t_tot,targetcat='setosa') {
cumgains <<- plot_input %>%
filter(category==targetcat) %>%
ggplot2::ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart")) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
return(plot(cumgains))
}
cumgains()
?pushViewport
?viewport
packageVersion(grid)
packageVersion("grid")
??grid.layout
?grid.layout
?geom_line()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
