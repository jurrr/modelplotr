theme(legend.position="top")
return(plot(cumgains))
}
cumgains()
multiplot(cumgains,lift,response,cumresponse,cols=2)
response <- function(plot_input=eval_t_tot,targetcat='setosa') {
response <<- plot_input %>%
filter(category==targetcat & decile>0) %>%
ggplot(aes(x=decile,y=pct, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=pcttot,colour=dataset),linetype=2) +
scale_x_discrete( name="decile", breaks=1:10, labels=1:10) +
scale_y_continuous(name="response",labels = scales::percent) +
ggtitle(paste("Response chart")) +
theme(plot.title = element_text(hjust = 0,size = 20)) +
theme(legend.position="top")
return(plot(response))
}
response()
multiplot(cumgains,lift,response,cumresponse,cols=2)
lift <- function(plot_input=eval_t_tot,targetcat='setosa') {
lift <<- plot_input %>%
filter(category==targetcat & decile>0) %>%
ggplot(aes(x=decile,y=cumlift, colour=dataset)) +
geom_line() +
geom_hline(yintercept = 1,colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative lift") +
ggtitle(paste("Lift chart")) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
return(plot(lift))
}
lift()
multiplot(cumgains,lift,response,cumresponse,cols=2)
devtools::load_all(".")
devtools::load_all(".")
iris_multiplotter()
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
clf <- randomForest:randomForest(species ~ ., data=train, importance = T)
train
clf <- randomForest::randomForest(species ~ ., data=train, importance = T)
iris_multiplotter <- function(){
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T)
# plot
dataprep_modevalplots(targetname="species")
input_modevalplots()
cumgains()
lift()
response()
cumresponse()
return(multiplot(cumgains,lift,response,cumresponse,cols=2))
}
iris_multiplotter()
cumgains()
lift()
cumgains <- function(plot_input=eval_t_tot,targetcat='setosa') {
cumgains <<- plot_input %>%
filter(category==targetcat) %>%
ggplot2::ggplot(aes(x=decile,y=cumgain, colour=dataset)) +
geom_line() +
geom_line(aes(x=decile,y=gain_opt, colour=dataset),linetype=2) +
geom_line(aes(x=decile,y=gain_ref), colour="gray",linetype=2) +
scale_x_discrete(name="decile", breaks=0:10, labels=0:10) +
scale_y_continuous(name="cumulative gains",breaks=seq(0,1,0.2),labels = scales::percent ) +
ggtitle(paste("Gains chart")) +
theme(plot.title = element_text(size = 20)) +
theme(legend.position="top")
return(plot(cumgains))
}
cumgains()
?pushViewport
?viewport
packageVersion(grid)
packageVersion("grid")
??grid.layout
?grid.layout
?geom_line()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
library(randomForest)
clf <- randomForest(species ~ ., data=train, importance = T)
dataprep_modevalplots(targetname="species")
devtools::load_all(".")
devtools::load_all(".")
dataprep_modevalplots(targetname="species")
library(tidyverse)
?select_
devtools::load_all(".")
dataprep_modevalplots(targetname="species")
input_modevalplots()
cumgains()
lift()
response()
cumresponse()
multiplot(cumgains,lift,response,cumresponse,cols=2)
devtools::load_all(".")
cumgains <- cumgains()
lift <- lift()
response <- response()
cumresponse <- cumresponse()
devtools::load_all(".")
devtools::load_all(".")
cumgains <- cumgains()
devtools::load_all(".")
cumgains <- cumgains()
library(tidyverse)
library(tidyverse)
ibrary?filter_
?filter_
eval_t_tot
plot_input %>%
dplyr::filter_("category"==targetcat)
plot_input=eval_t_tot
targetcat='setosa'
plot_input %>%
dplyr::filter_("category"==targetcat)
plot_input %>%
dplyr::filter(category==targetcat)
plot_input %>%
dplyr::filter(category==targetcat & decile>0)
devtools::load_all(".")
devtools::load_all(".")
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
clf <- randomForest(species ~ ., data=train, importance = T)
clf <- randomForest:randomForest(species ~ ., data=train, importance = T)
clf <- randomForest::randomForest(species ~ ., data=train, importance = T)
dataprep_modevalplots(targetname="species")
input_modevalplots()
cumgains <- cumgains()
devtools::load_all(".")
cumgains <- cumgains()
devtools::load_all(".")
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T)
# plot
dataprep_modevalplots(targetname="species")
input_modevalplots()
cumgains <- cumgains()
devtools::load_all(".")
cumgains <- cumgains()
cumgains
lift <- lift()
response <- response()
cumresponse <- cumresponse()
multiplot(cumgains,lift,response,cumresponse,cols=2)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T)
dataprep_modevalplots(targetname="species")
library(modelplotr)
dataprep_modevalplots(targetname="species")
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::document()
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T)
library(modelplotr)
dataprep_modevalplots(targetname="species")
devtools::load_all(".")
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T)
library(modelplotr)
dataprep_modevalplots(targetname="species")
devtools::load_all(".")
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T)
library(modelplotr)
dataprep_modevalplots(targetname="species")
devtools::load_all(".")
library(modelplotr)
dataprep_modevalplots(targetname="species")
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T)
library(modelplotr)
dataprep_modevalplots(targetname="species")
devtools::install_github('jurrr/modelplotr')
dataprep_modevalplots(targetname="species")
library(modelplotr)
dataprep_modevalplots(targetname="species")
input_modevalplots()
lift <- lift()
lift
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
if (grepl(x = getwd(),pattern="/home/"))  .libPaths( c(.libPaths(), "/var/app/rstudio/libs") )
require(ROracle)
require(plyr)
drv <- dbDriver("Oracle")
con <- dbConnect(drv, "CAMP_DM", "J2F9EZLS", dbname='SCV2DWHP.world')
res<-dbSendQuery(con, "SELECT * FROM CONTACT_HISTORY where rownum = 1")
st2 <- dbFetch(res)
dbDisconnect(conn = con)
st2
require(ROracle)
require(plyr)
install.packages("ROracle")
setwd('C:\\TEMP')   # set to path of download
install.packages('ROracle_1.2-1.zip', repos = NULL)
require(ROracle)
install.packages('ROracle_1.3-1.zip', repos = NULL)
require(ROracle)
rm(ROracle)
remove.packages(ROracle)
install.packages('ROracle_1.3-1.zip', repos = NULL)
require(ROracle)
install.packages('ROracle_1.3-1.zip', repos = 'C:/TEMP')
install.packages('ROracle_1.3-1.zip', repos = 'C:/TEMP/')
install.packages('ROracle_1.3-1.zip')
install.packages('ROracle_1.3-1.zip',repos=NULL)
remove.packages("ROracle", lib="~/R/win-library/3.5")
install.packages('ROracle_1.3-1.zip',repos=NULL)
require(ROracle)
devtools::load_all(".")
library(roxygen2)
devtools::load_all(".")
devtools::load_all(".")
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
library(xgboost)
install.packages("xgboost")
install.packages("xgboost")
install.packages("nnet")
library(xgboost)
??xgboost
clf <- xgboost::xgboost(species ~ ., data=train)
?xgboost
clf <- xgboost::xgboost(data=train,label=species)
clf <- xgboost::xgboost(data=train,label="species")
as.matrix(train)
clf <- xgboost::xgboost(data=as.matrix(train),label="species")
as.matrix(train[,1:4])
clf <- xgboost::xgboost(data=as.matrix(train[,1:4]),label=train$species)
clf <- xgboost::xgboost(data=as.matrix(train[,1:4]),label=train$species,nrounds = 5)
clf <- xgboost::xgboost(data=as.matrix(train[,1:4]),label=train$species,nrounds = 100)
clf <- xgboost::xgboost(data=as.matrix(train[,1:4]),label=train$species,nrounds = 10)
clf <- xgboost::xgboost(data=as.matrix(train[,1:4]),label=train$species,nrounds = 20)
library(modelplotr)
dataprep_modevalplots(targetname="species")
?dataprep_modevalplots
train1=as.matrix(train[,1:4])
test1=as.matrix(test[,1:4])
dataprep_modevalplots(datasets=[train1,test1],targetname="species")
dataprep_modevalplots(datasets=list(train1,test1),targetname="species")
dataprep_modevalplots(datasets=list("train1","test1"),targetname="species")
clf <- nnet::multinom(species ~ ., data = train)
dataprep_modevalplots(targetname="species")
zipname <- "https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip"
csvname <- "bank-additional.csv"
data <- read.table(unz(csvname, zipname),sep=";", stringsAsFactors=FALSE)
zipname <- "https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip"
csvname <- "bank-additional.csv"
data <- read.table(unz(zipname, csvname),sep=";", stringsAsFactors=FALSE)
download.file(zipname,temp, mode="wb")
temp <- tempfile()
download.file(zipname,temp, mode="wb")
unzip(temp, csvname)
temp
unzip(temp)
temp
dd <- read.table(temp,sep=";", stringsAsFactors=FALSE)
data <- read.csv2('https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip/bank-additional/bank-additional.csv')
temp <- tempfile()
download.file(zipname,temp, mode="wb")
unzip(csvname)
csvname <- "/bank-additional/bank-additional.csv"
unzip(csvname)
unzip(temp,csvname)
csvname <- "bank-additional/bank-additional.csv"
unzip(temp,csvname)
data<-unzip(temp,csvname)
data
dd <- read.table(temp,sep=";", stringsAsFactors=FALSE)
dd <- read.table(data,sep=";", stringsAsFactors=FALSE)
dd
temp <- tempfile()
download.file(zipname,temp, mode="wb")
data <- read.table(unzip(temp,csvname),sep=";", stringsAsFactors=FALSE)
describe
describe(data)
summary(data)
data <- read.table(unzip(temp,csvname),sep=";", stringsAsFactors=FALSE,header = T)
summary(data)
bank <- read.table(unzip(temp,csvname),sep=";", stringsAsFactors=FALSE,header = T)
summary(bank)
unlink(temp)
test_size = 0.3
train_index =  sample(seq(1, nrow(bank)),size = (1 - test_size)*nrow(bank) ,replace = F )
train = bank[train_index,]
test = bank[-train_index,]
clf <- randomForest::randomForest(y ~ ., data=train, importance = T)
?randomForest::randomForest
bank[,target] = bank[,y]
bank[,"target"] = bank[,"y"]
bank[,"y"] = NULL
test_size = 0.3
train_index =  sample(seq(1, nrow(bank)),size = (1 - test_size)*nrow(bank) ,replace = F )
train = bank[train_index,]
test = bank[-train_index,]
clf <- ?randomForest::randomForest(target ~ ., data=train, importance = T)
clf <- randomForest::randomForest(target ~ ., data=train, importance = T)
temp <- tempfile()
download.file(zipname,temp, mode="wb")
bank <- read.table(unzip(temp,csvname),sep=";", stringsAsFactors=FALSE,header = T)
summary(bank)
unlink(temp)
bank$y = as.factor(bank$y)
test_size = 0.3
train_index =  sample(seq(1, nrow(bank)),size = (1 - test_size)*nrow(bank) ,replace = F )
train = bank[train_index,]
test = bank[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(y ~ ., data=train, importance = T)
summary(bank)
clf <- randomForest::randomForest(y ~ duration, data=train, importance = T)
clf
clf <- randomForest::randomForest(y ~ duration+campaign, data=train, importance = T)
dataprep_modevalplots(targetname="y")
lilbrary(modelplotr)
library(modelplotr)
dataprep_modevalplots(targetname="y")
input_modevalplots()
cumgains <- cumgains()
lift <- lift()
response <- response()
cumresponse <- cumresponse()
multiplot(cumgains,lift,response,cumresponse,cols=2)
levels(bank$y)
cumgains <- cumgains(targetcat='yes')
cumgains
lift <- lift(targetcat='yes')
response <- response(targetcat='yes')
cumresponse <- cumresponse(targetcat='yes')
multiplot(cumgains,lift,response,cumresponse,cols=2)
devtools::load_all(".")
install.packages(c("callr", "dplyr", "ini", "Rcpp", "tidyr"))
install.packages(c("callr", "dplyr", "ini", "Rcpp", "tidyr"))
install.packages(c("callr", "dplyr", "ini", "Rcpp", "tidyr"))
install.packages(c("callr", "dplyr", "ini", "Rcpp", "tidyr"))
install.packages(c("callr", "dplyr", "ini", "Rcpp", "tidyr"))
devtools::load_all(".")
devtools::load_all(".")
# prepare iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
# estimate Random Forest
clf <- randomForest::randomForest(species ~ ., data=train, importance = T)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
library(modelplotr)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(targetname="species")
cumgains <- cumgains()
lift <- lift()
response <- response()
cumresponse <- cumresponse()
multiplot(cumgains,lift,response,cumresponse,cols=2)
clf <- nnet::multinom(species ~ ., data = train)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(targetname="species")
cumgains <- cumgains()
lift <- lift()
response <- response()
cumresponse <- cumresponse()
multiplot(cumgains,lift,response,cumresponse,cols=2)
clf <- xgboost::xgboost(data=as.matrix(train[,1:4]),label=train$species,nrounds = 20)
dataprep_modevalplots(datasets=list("train","test"),targetname="species")
dataprep_modevalplots(datasets=list("train1","test1"),targetname="species")
train1=as.matrix(train[,1:4])
test1=as.matrix(test[,1:4])
dataprep_modevalplots(datasets=list("train1","test1"),targetname="species")
zipname = 'https://archive.ics.uci.edu/ml/machine-learning-databases/00222/'
csvname = 'bank-additional/bank-additional.csv'
temp <- tempfile()
download.file(zipname,temp, mode="wb")
bank <- read.table(unzip(temp,csvname),sep=";", stringsAsFactors=FALSE,header = T)
summary(bank)
unlink(temp)
zipname = 'https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip'
csvname = 'bank-additional/bank-additional.csv'
temp <- tempfile()
download.file(zipname,temp, mode="wb")
bank <- read.table(unzip(temp,csvname),sep=";", stringsAsFactors=FALSE,header = T)
summary(bank)
unlink(temp)
bank$y = as.factor(bank$y)
test_size = 0.3
train_index =  sample(seq(1, nrow(bank)),size = (1 - test_size)*nrow(bank) ,replace = F )
train = bank[train_index,]
test = bank[-train_index,]
summary(bank)
# estimate Random Forest
clf <- randomForest::randomForest(y ~ duration+campaign, data=train, importance = T)
levels(bank$y)
dataprep_modevalplots(targetname="y")
input_modevalplots()
cumgains <- cumgains(targetcat='yes')
lift <- lift(targetcat='yes')
response <- response(targetcat='yes')
cumresponse <- cumresponse(targetcat='yes')
multiplot(cumgains,lift,response,cumresponse,cols=2)
devtools::load_all(".")
devtools::load_all(".")
?modelplotr
??modelplotr
??modelplotr()
?modelplotr()
modelplotr
modelplotr()
vignette(modelplotr)
library("modelplotr", lib.loc="~/R/win-library/3.5")
?modelplotr
??modelplotr
library(roxygen2)
devtools::document()
??modelplotr
?dataprep_modevalplots
devtools::load_all(".")
