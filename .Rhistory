devtools::load_all(".")
warnings()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
head(iris)
#helaas niet hetzelfde als in python
# [18, 56, 120, 95, 52, 51, 1, 73, 14, 37, 3, 63, 48, 91, 68, 36, 148, 89, 30, 44,
# 144, 146, 43, 107, 126, 98, 111, 92, 116, 46, 81, 70, 55, 27, 72, 90, 61, 50, 47,
# 132, 149, 124, 19, 94, 76, 65, 83, 4, 16, 67, 34, 10, 93, 59, 99, 142, 100, 49, 110,
# 118, 13, 71, 112, 133, 114, 139, 86, 74, 79, 109, 97, 45, 137, 6, 31, 69, 85, 143, 29,
# 130, 0, 82, 77, 122, 123, 104, 105, 40, 135, 96, 119, 38, 26, 128, 127, 42, 147, 22,
# 60, 75, 87, 25, 134, 9, 102]
#zie ook https://stackoverflow.com/questions/22213298/creating-same-random-number-sequence-in-python-numpy-and-r?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
head(train)
test_size = 0.3
train_index =  sample(seq(1, nrow(X)),size = (1 - test_size)*nrow(X) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
train_index
head(train)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
head(iris)
test_size = 0.3
train_index =  sample(seq(1, nrow(X)),size = (1 - test_size)*nrow(X) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
train_index
head(train)
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
# iris dataset
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
head(iris)
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
train_index
head(train)
library(randomForest)
install.packages("randomForest")
library(randomForest)
clf <- randomForest(species ~ ., data=train, importance = T)
# Predict the labels of the test data: y_pred
y_pred <- predict(clf, test)
clf$importance
confusionMatrix(y_pred, test$species)
library(caret)
install.packages("caret")
library(caret)
confusionMatrix(y_pred, test$species)
install.packages("e1071")
library(caret)
confusionMatrix(y_pred, test$species)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(ggplot2)
library(tidyverse)
package_version("tidyverse")
package_version(tidyverse)
packageVersion("tidyverse")
install.packages("tidyverse")
packageVersion("tidyverse")
packageVersion("ggplot2")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
source('C:/TEMP/modelplotr/R/dataprepmodelplots.R', echo=TRUE)
devtools::load_all(".")
devtools::load_all(".")
library(randomForest)
library(tidyverse)
library(caret)
clf <- randomForest(species ~ ., data=train, importance = T)
data(iris)
colnames(iris) = c('sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species')
head(iris)
test_size = 0.3
train_index =  sample(seq(1, nrow(iris)),size = (1 - test_size)*nrow(iris) ,replace = F )
train = iris[train_index,]
test = iris[-train_index,]
train_index
head(train)
clf <- randomForest(species ~ ., data=train, importance = T)
y_pred <- predict(clf, test)
devtools::load_all('C:/TEMP/modelplotr')
dataprep_modevalplots()
devtools::load_all(".")
dataprep_modevalplots(depvar = 'species')
dataprep_modevalplots(depvar = 'species')
eval_tot
return('data preparation succeeded! dataframe \'eval_tot\' created.  ')
devtools::load_all(".")
dataprep_modevalplots(depvar = 'species')
devtools::load_all(".")
dataprep_modevalplots(depvar = 'species')
library(roxygen2)
devtools::load_all(".")
devtools::document()
?dataprep_modevalplots
devtools::load_all(".")
?dataprep_modevalplots
devtools::document()
?dataprep_modevalplots
devtools::load_all(".")
?dataprep_modevalplots
devtools::document()
?dataprep_modevalplots
library(modelplotr)
?dataprep_modevalplots
library(modelplotr)
?dataprep_modevalplots
devtools::document()
?dataprep_modevalplots
?dataprep_modevalplots
library(modelplotr)
devtools::document()
?dataprep_modevalplots
library(modelplotr)
devtools::document()
?dataprep_modevalplots
devtools::load_all(".")
devtools::document()
?dataprep_modevalplots
devtools::load_all(".")
devtools::document()
?dataprep_modevalplots
devtools::load_all(".")
devtools::document()
?dataprep_modevalplots
devtools::load_all(".")
source('~/.active-rstudio-document', echo=TRUE)
devtools::document()
?dataprep_modevalplots
devtools::load_all(".")
devtools::document()
?dataprep_modevalplots
?input_modevalplots
library(modelplotr)
devtools::document()
?dataprep_modevalplots
devtools::load_all(".")
devtools::document()
?dataprep_modevalplots
?input_modevalplots
devtools::use_vignette("modelplotr")
devtools::use_testthat()
usethis::use_testthat()
devtools::load_all(".")
devtools::load_all(".")
file.exists("~/.shh/id_rsa.pub")
list.files(
path=c("c:/program files", "c:/program files (x86)"),
pattern="git.exe",
full.names=TRUE,
recursive=TRUE
)
list.files(
path=c("c:/program files", "c:/program files (x86)"),
pattern="svn.exe",
full.names=TRUE,
recursive=TRUE
)
list.files(
path=c("c:/"),
pattern="svn.exe",
full.names=TRUE,
recursive=TRUE
)
devtools::load_all(".")
