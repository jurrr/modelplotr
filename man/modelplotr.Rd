% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modelplotr.R
\docType{package}
\name{modelplotr}
\alias{modelplotr}
\alias{modelplotr-package}
\title{modelplotr: Plots to Evaluate the Business Performance of Predictive Models.}
\description{
The modelplotr package provides three categories of important functions:
datapreparation, plot parameterization and plotting.
}
\section{Datapreparation functions}{

 The datapreparation functions are:
\describe{
  \item{\code{\link{prepare_scores_and_ntiles}}}{a function that builds a dataframe
  that contains actuals and predictions on dependent variable for each dataset in datasets.}
  \item{\code{\link{aggregate_over_ntiles}}}{a function that creates a dataframe with aggregated
    actuals and predictions. A record in 'ntiles_aggregate' is unique on the combination
    of datasets-ntile.}
  \item{\code{\link{plotting_scope}}}{a function that creates a dataframe with a subset
    of 'ntiles_aggregate', relevant to the selected scope of evaluation. }}
}

\section{Parameterization functions}{

 Most parameterization functions are internal functions. However, one is available for customization:
\describe{
  \item{\code{\link{customize_plot_text}}}{a
  function that returns a list that contains all textual elements of all plots that can be created with modelplotr.
  By changing the list and including the list in plot functions, plot texts can be customized (eg. translated)  }}
}

\examples{
data(iris)
# add some noise to iris to prevent perfect models
addNoise <- function(x) round(rnorm(n=100,mean=mean(x),sd=sd(x)),1)
iris_addnoise <- as.data.frame(lapply(iris[1:4], addNoise))
iris_addnoise$Species <- sample(unique(iris$Species),100,replace=TRUE)
iris <- rbind(iris,iris_addnoise)
train_index =  sample(seq(1, nrow(iris)),size = 0.7*nrow(iris), replace = F )
train = iris[train_index,]
test = iris[-train_index,]
#train models using mlr...
trainTask <- mlr::makeClassifTask(data = train, target = "Species")
testTask <- mlr::makeClassifTask(data = test, target = "Species")
mlr::configureMlr() # this line is needed when using mlr without loading it (mlr::)
task = mlr::makeClassifTask(data = train, target = "Species")
lrn = mlr::makeLearner("classif.randomForest", predict.type = "prob")
rf = mlr::train(lrn, task)
lrn = mlr::makeLearner("classif.multinom", predict.type = "prob")
mnl = mlr::train(lrn, task)
#... or train models using caret...
rf = caret::train(Species ~.,data = train, method = "rf")
mnl = caret::train(Species ~.,data = train, method = "multinom",trace = FALSE)
#.. or train models using h2o
h2o::h2o.init()
h2o::h2o.no_progress()
h2o_train = h2o::as.h2o(train)
h2o_test = h2o::as.h2o(test)
gbm <- h2o::h2o.gbm(y = "Species",
                          x = setdiff(colnames(train), "Species"),
                          training_frame = h2o_train,
                          nfolds = 5)
# preparation steps
scores_and_ntiles <- prepare_scores_and_ntiles(datasets=list("train","test"),
                      dataset_labels = list("train data","test data"),
                      models = list("rf","mnl", "gbm"),
                      model_labels = list("random forest","multinomial logit", "gradient boosting machine"),
                      target_column="Species")
head(scores_and_ntiles)
plot_input <- plotting_scope(prepared_input = scores_and_ntiles)
# various plotting examples with different plotting scopes
plot_cumgains(data=plot_input)
plot_cumgains(highlight_ntile=2)
plotting_scope(scope="compare_models")
plot_cumlift()
plot_cumlift(highlight_ntile=2,highlight_how="plot")
plotting_scope(scope="compare_targetclasses")
plot_response()
plot_response(custom_line_colors = c('green','orange','darkblue'))
plotting_scope(scope="compare_datasets")
plot_cumresponse()
plot_cumresponse(highlight_ntile=2,highlight_how="text")
plot_all()

}
\seealso{
\url{https://github.com/modelplot/modelplotr} for details on the package

\url{https://modelplot.github.io/} for our blog posts on using modelplotr
}
\author{
Jurriaan Nagelkerke <jurriaan.nagelkerke@gmail.com> [aut, cre]

Pieter Marcus <pieter.marcus@persgroep.net> [aut]
}
