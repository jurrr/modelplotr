% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modelplotr.R
\docType{package}
\name{modelplotr}
\alias{modelplotr}
\alias{modelplotr-package}
\title{modelplotr: Plots to Evaluate the Business Performance of Predictive Models.}
\description{
Plots to evaluate the business performance of predictive models in R.
A number of widely used plots to assess the quality of a predictive model from a business perspective
can easily be created. Using these plots, it can be shown how implementation of the model will impact
business targets like response on a campaign or return on investment.
The modelplotr package provides three categories of important functions:
datapreparation, plot parameterization and plotting.
}
\section{Datapreparation functions}{

 The datapreparation functions are:
\describe{
  \item{\code{\link{prepare_scores_and_ntiles}}}{a function that builds a dataframe
  that contains actuals and predictions on dependent variable for each dataset in datasets. As inputs, it takes dataframes
  to score and model objects created with \strong{catet},  \strong{mlr} or  \strong{H2o}.
  To use modelplotr on top of models created otherwise, see \code{\link{aggregate_over_ntiles}}}
  \item{\code{\link{plotting_scope}}}{a function that creates a dataframe in the required format for all
  modelplotr plots, relevant to the selected scope of evaluation. Each record in this dataframe represents
  a unique combination of datasets, models, target classes and ntiles. As an input, plotting_scope can handle
  both a dataframe created with \code{aggregate_over_ntiles} as well as a dataframe created with
  \code{prepare_scores_and_ntiles} (or created otherwise with similar layout). }
  \item{\code{\link{aggregate_over_ntiles}}}{a function that aggregates the output of \code{prepare_scores_and_ntiles}
  to create a dataframe with aggregated actuals and predictions. Each record in this dataframe represents
  a unique combination of datasets, models, target classes and ntiles. In most cases, you do not need to use function
  since the \code{plotting_scope} function will call this function automatically.}}
}

\section{Parameterization functions}{

 Most parameterization functions are internal functions. However, one is available for customization:
\describe{
  \item{\code{\link{customize_plot_text}}}{a function that returns a list that contains all textual elements for
  all plots that can be created with modelplotr. By changing the elements in this list - simply by overwriting values -
  and then including this list with the \code{custom_plot_text} parameter in plot functions, plot texts can easily be customized}}
}

\section{Plotting functions}{

  The plotting functions are:
\describe{
  \item{\code{\link{plot_cumgains}}}{Generates the cumulative gains plot. This plot, often referred to as the gains chart,
    helps answering the question: \strong{\emph{When we apply the model and select the best X ntiles,
    what percentage of the actual target class observations can we expect to target?}} }
    \item{\code{\link{plot_cumlift}}}{Generates the cumulative lift plot, often referred to as lift plot or index plot,
    helps you answer the question: \strong{\emph{When we apply the model and select the best X ntiles,
    how many times better is that than using no model at all?}}}
    \item{\code{\link{plot_response}}}{Generates the response plot. It plots the percentage of target class observations
    per ntile. It can be used to answer the following business question: \strong{\emph{When we apply
    the model and select ntile X, what is the expected percentage of target class observations
    in that ntile?}}}
    \item{\code{\link{plot_cumresponse}}}{Generates the cumulative response plot. It plots the cumulative percentage of
     target class observations up until that ntile. It helps answering the question:
     \strong{\emph{When we apply the model and select up until ntile X, what is the expected percentage of
     target class observations in the selection? }}}
    \item{\code{\link{plot_multiplot}}}{Generates a canvas with all four evaluation plots - cumulative gains, cumulative lift,
    response and cumulative response - combined on one canvas}
    \item{\code{\link{plot_costsrevs}}}{It plots the cumulative costs and revenues up until that ntile when the model
    is used for campaign selection. It can be used to answer the following business question:
     \strong{\emph{When we apply the model and select up until ntile X, what are the expected costs and
     revenues of the campaign?}}}
    \item{\code{\link{plot_profit}}}{Generates the Profit plot. It plots the cumulative profit up until that ntile when the
    model is used for campaign selection. It can be used to answer the following business question:
     \strong{\emph{When we apply the model and select up until ntile X, what is the expected profit of the campaign?}}}
    \item{\code{\link{plot_roi}}}{Generates the Return on Investment plot. It plots the cumulative revenues as a percentage
    of investments up until that ntile when the model is used for campaign selection. It can be used to answer the following
    business question: \strong{\emph{When we apply the model and select up until ntile X, what is the expected % return on
    investment of the campaign?}}}
    }
}

\examples{
data(iris)
# add some noise to iris to prevent perfect models
addNoise <- function(x) round(rnorm(n=100,mean=mean(x),sd=sd(x)),1)
iris_addnoise <- as.data.frame(lapply(iris[1:4], addNoise))
iris_addnoise$Species <- sample(unique(iris$Species),100,replace=TRUE)
iris <- rbind(iris,iris_addnoise)
train_index =  sample(seq(1, nrow(iris)),size = 0.7*nrow(iris), replace = F )
train = iris[train_index,]
test = iris[-train_index,]
#train models using mlr...
trainTask <- mlr::makeClassifTask(data = train, target = "Species")
testTask <- mlr::makeClassifTask(data = test, target = "Species")
mlr::configureMlr() # this line is needed when using mlr without loading it (mlr::)
task = mlr::makeClassifTask(data = train, target = "Species")
lrn = mlr::makeLearner("classif.randomForest", predict.type = "prob")
rf = mlr::train(lrn, task)
lrn = mlr::makeLearner("classif.multinom", predict.type = "prob")
mnl = mlr::train(lrn, task)
#... or train models using caret...
rf = caret::train(Species ~.,data = train, method = "rf")
mnl = caret::train(Species ~.,data = train, method = "multinom",trace = FALSE)
#.. or train models using h2o
h2o::h2o.init()
h2o::h2o.no_progress()
h2o_train = h2o::as.h2o(train)
h2o_test = h2o::as.h2o(test)
gbm <- h2o::h2o.gbm(y = "Species",
                          x = setdiff(colnames(train), "Species"),
                          training_frame = h2o_train,
                          nfolds = 5)
# preparation steps
scores_and_ntiles <- prepare_scores_and_ntiles(datasets=list("train","test"),
                      dataset_labels = list("train data","test data"),
                      models = list("rf","mnl", "gbm"),
                      model_labels = list("random forest","multinomial logit", "gradient boosting machine"),
                      target_column="Species")
plot_input <- plotting_scope(prepared_input = scores_and_ntiles)
head(plot_input)
# various plotting examples with different plotting scopes
plot_cumgains(data=plot_input)
plot_cumgains(data=plot_input,highlight_ntile=2)
plot_input <- plotting_scope(prepared_input = scores_and_ntiles,scope="compare_models")
plot_cumlift(data=plot_input)
plot_cumlift(data=plot_input,highlight_ntile=2,highlight_how="plot")
plot_input <- plotting_scope(prepared_input = scores_and_ntiles,scope="compare_targetclasses")
plot_response(data=plot_input)
plot_response(data=plot_input,custom_line_colors = c('green','orange','darkblue'))
plot_input <- plotting_scope(prepared_input = scores_and_ntiles,scope="compare_datasets")
plot_cumresponse(data=plot_input)
plot_cumresponse(data=plot_input,highlight_ntile=2,highlight_how="text")
plot_multiplot(data=plot_input)
plot_costsrevs(data = plot_input,fixed_costs = 1000,variable_costs_per_unit = 10,profit_per_unit = 50)
plot_profit(data = plot_input,fixed_costs = 1000,variable_costs_per_unit = 10,profit_per_unit = 50)
plot_roi(data = plot_input,fixed_costs = 1000,variable_costs_per_unit = 10,profit_per_unit = 50)

}
\seealso{
\url{https://github.com/modelplot/modelplotr} for details on the package

\url{https://modelplot.github.io/} for our blog posts on using modelplotr
}
\author{
Jurriaan Nagelkerke <jurriaan.nagelkerke@gmail.com> [aut, cre]

Pieter Marcus <pieter.marcus@persgroep.net> [aut]
}
