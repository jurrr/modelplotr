% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataprepmodelplots.R
\name{aggregate_over_deciles}
\alias{aggregate_over_deciles}
\title{Build 'deciles_aggregate' with aggregated evaluation measures}
\usage{
aggregate_over_deciles(prepared_input = scores_and_deciles)
}
\arguments{
\item{scores_and_deciles}{Dataframe resulting from function \code{\link{prepare_scores_and_deciles}} or a data frame that meets
requirements as specified in the section below: \bold{When you build scores_and_deciles yourself} .}
}
\value{
Dataframe \code{deciles_aggregate} is built based on \code{scores_and_deciles}.\cr\cr
\code{deciles_aggregate} contains:
\tabular{lll}{
  \bold{column} \tab \bold{type} \tab \bold{definition} \cr
  model_label \tab String \tab Name of the model object \cr
  dataset_label \tab Factor \tab Datasets to include in the plot as factor levels\cr
  target_class\tab String or Integer\tab Target classes to include in the plot\cr
  decile\tab Integer\tab Decile groups based on model probability for target class\cr
  neg\tab Integer\tab Number of cases not belonging to target class in dataset in decile\cr
  pos\tab Integer\tab Number of cases belonging to target class in dataset in decile\cr
  tot\tab Integer\tab Total number of cases in dataset in decile\cr
  pct\tab Decimal \tab Percentage of cases in dataset in decile that belongs to
    target class (pos/tot)\cr
  negtot\tab Integer\tab Total number of cases not belonging to target class in dataset\cr
  postot\tab Integer\tab Total number of cases belonging to target class in dataset\cr
  tottot\tab Integer\tab Total number of cases in dataset\cr
  pcttot\tab Decimal\tab Percentage of cases in dataset that belongs to
    target class (postot / tottot)\cr
  cumneg\tab Integer\tab Cumulative number of cases not belonging to target class in
    dataset from decile 1 up until decile\cr
  cumpos\tab Integer\tab Cumulative number of cases belonging to target class in
    dataset from decile 1 up until decile\cr
  cumpos\tab Integer\tab Cumulative number of cases belonging to target class in
    dataset from decile 1 up until decile\cr
  cumtot\tab Integer\tab Cumulative number of cases in dataset from decile 1
    up until decile\cr
  gain\tab Decimal\tab Gains value for dataset for decile (pos/postot)\cr
  cumgain\tab Decimal\tab Cumulative gains value for dataset for decile
    (cumpos/postot)\cr
  gain_ref\tab Decimal\tab Lower reference for gains value for dataset for decile
    (decile/10)\cr
  gain_opt\tab Decimal\tab Upper reference for gains value for dataset for decile\cr
  lift\tab Decimal\tab Lift value for dataset for decile (pct/pcttot)\cr
  cumlift\tab Decimal\tab Cumulative lift value for dataset for decile
    ((cumpos/cumtot)/pcttot)\cr
  cumlift_ref\tab Decimal\tab Reference value for Cumulative lift value (constant: 1)
 }
}
\description{
Build dataframe 'deciles_aggregate' with aggregated actuals and predictions .
A record in 'deciles_aggregate' is unique on the combination of models [m], datasets [d], targetvalues [t] and deciles.
The size of deciles_aggregate is (m*d*t*10) rows and 23 columns.
}
\section{When you build scores_and_deciles yourself}{

To make plots with modelplotr, is not required to use the function prepare_scores_and_deciles to generate scores_and_deciles.
You can create your own dataframe containing actuals and predictions and deciles (decile 1= 10 percent
with highest model probability, 10= 10 percent with lowest probability according to model) ,
In that case, make sure the input dataframe contains the folowing columns & formats:
\tabular{lll}{
  \bold{column} \tab \bold{type} \tab \bold{definition} \cr
  model_label \tab Factor \tab Name of the model object \cr
  dataset_label \tab Factor \tab Datasets to include in the plot as factor levels\cr
  y_true \tab Factor \tab Target with actual values \cr
  prob_[tv1] \tab Decimal \tab Probability according to model for target value 1 \cr
  prob_[tv2] \tab Decimal \tab Probability according to model for target value 2 \cr
  ... \tab ... \tab ... \cr
  prob_[tvn] \tab Decimal \tab Probability according to model for target value n \cr
  dcl_[tv1] \tab Integer \tab Decile based on probability according to model for target value 1 \cr
  dcl_[tv2] \tab Integerl \tab Decile based on probability according to model for target value 2 \cr
  ... \tab ... \tab ... \cr
  dcl_[tvn] \tab Integer \tab Decile based on probability according to model for target value n
 }
}

\examples{
data(iris)
# add some noise to iris to prevent perfect models
addNoise <- function(x) round(rnorm(n=100,mean=mean(x),sd=sd(x)),1)
iris_addnoise <- as.data.frame(lapply(iris[1:4], addNoise))
iris_addnoise$Species <- sample(unique(iris$Species),100,replace=TRUE)
iris <- rbind(iris,iris_addnoise)
train_index =  sample(seq(1, nrow(iris)),size = 0.7*nrow(iris), replace = F )
train = iris[train_index,]
test = iris[-train_index,]
#train models using mlr...
trainTask <- mlr::makeClassifTask(data = train, target = "Species")
testTask <- mlr::makeClassifTask(data = test, target = "Species")
mlr::configureMlr() # this line is needed when using mlr without loading it (mlr::)
task = mlr::makeClassifTask(data = train, target = "Species")
lrn = mlr::makeLearner("classif.randomForest", predict.type = "prob")
rf = mlr::train(lrn, task)
lrn = mlr::makeLearner("classif.multinom", predict.type = "prob")
mnl = mlr::train(lrn, task)
#... or train models using caret...
rf = caret::train(Species ~.,data = train, method = "rf")
mnl = caret::train(Species ~.,data = train, method = "multinom",trace = FALSE)
#.. or train models using h2o
h2o::h2o.init()
h2o::h2o.no_progress()
h2o_train = h2o::as.h2o(train)
h2o_test = h2o::as.h2o(test)
gbm <- h2o::h2o.gbm(y = "Species",
                          x = setdiff(colnames(train), "Species"),
                          training_frame = h2o_train,
                          nfolds = 5)
# preparation steps
prepare_scores_and_deciles(datasets=list("train","test"),
                      dataset_labels = list("train data","test data"),
                      models = list("rf","mnl", "gbm"),
                      model_labels = list("random forest","multinomial logit", "gradient boosting machine"),
                      target_column="Species")
head(scores_and_deciles)
aggregate_over_deciles()
plotting_scope()
# various plotting examples with different plotting scopes
plot_cumgains()
plot_cumgains(highlight_decile=2)
plotting_scope(scope="compare_models")
plot_cumlift()
plot_cumlift(highlight_decile=2,highlight_how="plot")
plotting_scope(scope="compare_targetclasses")
plot_response()
plot_response(custom_line_colors = c('green','orange','darkblue'))
plotting_scope(scope="compare_datasets")
plot_cumresponse()
plot_cumresponse(highlight_decile=2,highlight_how="text")
plot_all()
}
\seealso{
\code{\link{modelplotr}} for generic info on the package \code{moddelplotr}

\code{\link{prepare_scores_and_deciles}} for details on the function \code{prepare_scores_and_deciles}
that generates the required input.

\code{\link{plotting_scope}} for details on the function \code{plotting_scope} that
filters the output of \code{aggregate_over_deciles} to prepare it for the required evaluation.

\url{https://github.com/modelplot/modelplotr} for details on the package

\url{https://modelplot.github.io/} for our blog on the value of the model plots
}
