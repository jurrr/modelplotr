% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parametersmodelplots.R
\name{customize_plot_text}
\alias{customize_plot_text}
\title{Customize textual elements of the plots}
\usage{
customize_plot_text(plot_input = plot_input)
}
\arguments{
\item{plot_input}{Dataframe. Dataframe needs to be created with
\code{\link{plotting_scope}} or else meet required input format.}
}
\value{
List with default values for all textual elements of the plots.
}
\description{
Function to overrule the default textual elements in the plots, like title, subtitle,
axis labels and annotation texts when the highlighting parameter \code{highlight_ntile}
is specified.
}
\section{How to customize textual elements of plots}{

All textual parts of the plots can be customized, for instance to translate
textual elements to another language or to change the annotation text that is added with the
\code{highlight_ntile} parameter. Once you have created the \code{plot_input} dataframe
using \code{plotting_Scope}, you can run this \code{customize_plot_text()} function.
It returns a list, containing all textual elements of the plots, including annotation texts.
For instance, run \cr\cr
\code{my_plot_text <- customize_plot_text(plot_input = plot_input)} \cr\cr
The list contains plot-specific elements (e.g. \code{...$cumgains$...})). \cr
Now, you can change the textual elements by overriding the element(s) you want to customize.
For instance, if you want to change the textual elements of the gains plot to Dutch:\cr\cr
\code{my_plot_text$gains$plottitle <- 'Cumulatieve Gains grafiek'}\cr
\code{my_plot_text$gains$x_axis_label <- 'Deciel'}\cr
\code{my_plot_text$gains$y_axis_label <- 'cumulatieve gains'}\cr
\code{my_plot_text$cumgains$optimal_gains_label <- 'maximale gains'}\cr
\code{my_plot_text$cumgains$minimal_gains_label <- 'minimale gains'}\cr
\code{plot_cumgains(custom_plot_text = my_plot_text)}\cr\cr
To change the annotation text, use the placeholders starting with '&' to dynamically include:
\tabular{ll}{
  \bold{palaceholder} \tab \bold{placeholder value}\cr
  \code{&NTL} \tab ntile specified with parameter \code{highlight_ntile}.\cr
  \code{&PCTNTL} \tab Total percentage of dataset selected up until specified ntile.\cr
  \code{&MDL} \tab Selected model label(s).\cr
  \code{&DS} \tab Selected dataset label(s).\cr
  \code{&YVAL} \tab Selected target class (Y-value).\cr
  \code{&CUMGAINS} \tab Cumulative gains value at specified ntile.\cr
  \code{&CUMLIFT} \tab Cumulative lift value at specified ntile.\cr
  \code{&RESPONSE} \tab Response value at specified ntile.\cr
  \code{&CUMRESPONSE} \tab Cumulative response value at specified ntile.\cr
}
For instance, to translate the gains plot annotation text to Dutch:\cr
\code{my_plot_text$cumlift$annotationtext <- "Door &PCTNTL met de hoogste modelkans volgens model &MDL
in &DS te selecteren is deze selectie van &YVAL observaties &CUMLIFT keer beter dan een random selectie."}\cr
\code{plot_cumlift(highlight_ntile=3,custom_plot_text=my_plot_text)}
}

\examples{
data(iris)
# add some noise to iris to prevent perfect models
addNoise <- function(x) round(rnorm(n=100,mean=mean(x),sd=sd(x)),1)
iris_addnoise <- as.data.frame(lapply(iris[1:4], addNoise))
iris_addnoise$Species <- sample(unique(iris$Species),100,replace=TRUE)
iris <- rbind(iris,iris_addnoise)
train_index =  sample(seq(1, nrow(iris)),size = 0.7*nrow(iris), replace = F )
train = iris[train_index,]
test = iris[-train_index,]
#train models using mlr...
trainTask <- mlr::makeClassifTask(data = train, target = "Species")
testTask <- mlr::makeClassifTask(data = test, target = "Species")
mlr::configureMlr() # this line is needed when using mlr without loading it (mlr::)
task = mlr::makeClassifTask(data = train, target = "Species")
lrn = mlr::makeLearner("classif.randomForest", predict.type = "prob")
rf = mlr::train(lrn, task)
lrn = mlr::makeLearner("classif.multinom", predict.type = "prob")
mnl = mlr::train(lrn, task)
#... or train models using caret...
rf = caret::train(Species ~.,data = train, method = "rf")
mnl = caret::train(Species ~.,data = train, method = "multinom",trace = FALSE)
#.. or train models using h2o
h2o::h2o.init()
h2o::h2o.no_progress()
h2o_train = h2o::as.h2o(train)
h2o_test = h2o::as.h2o(test)
gbm <- h2o::h2o.gbm(y = "Species",
                          x = setdiff(colnames(train), "Species"),
                          training_frame = h2o_train,
                          nfolds = 5)
# preparation steps
prepare_scores_and_ntiles(datasets=list("train","test"),
                      dataset_labels = list("train data","test data"),
                      models = list("rf","mnl"),
                      model_labels = list("random forest","multinomial logit"),
                      target_column="Species")
head(scores_and_ntiles)
aggregate_over_ntiles()
plotting_scope(scope="compare_models")
custom_plot_text <- customize_plot_text(plot_input=plot_input)
custom_plot_text$cumlift$plottitle <- 'Cumulatieve Lift grafiek'
custom_plot_text$cumlift$x_axis_label <- 'Deciel'
plot_cumlift(custom_plot_text=custom_plot_text)
custom_plot_text$cumlift$annotationtext <- "Door &PCTNTL met de hoogste modelkans volgens model &MDL in &DS te selecteren is deze selectie van &YVAL observaties &CUMLIFT keer beter dan een random selectie."
plot_cumlift(highlight_ntile=3,custom_plot_text=custom_plot_text)
}
\seealso{
\code{\link{modelplotr}} for generic info on the package \code{moddelplotr}

\url{https://github.com/modelplot/modelplotr} for details on the package

\url{https://modelplot.github.io/} for our blog on the value of the model plots
}
