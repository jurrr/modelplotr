% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plottingmodelplots.R
\name{plot_all}
\alias{plot_all}
\title{Create plot with all four evaluation plots}
\usage{
plot_all(data = plot_input, save_fig = FALSE, save_fig_filename = NA,
  custom_line_colors = NA, highlight_ntile = NA,
  custom_plot_text = NULL, ...)
}
\arguments{
\item{data}{Dataframe. Dataframe needs to be created with \code{\link{plotting_scope}}
or else meet required input format.}

\item{save_fig}{Logical. Save plot to file? Default = FALSE. When set to TRUE, saved plot_all is optimized for 36x24cm.}

\item{save_fig_filename}{String. Filename of saved plot. Default the plot is saved as {working_dir_path}/{plotname}.png.}

\item{custom_line_colors}{Vector of Strings. Specifying colors for the lines in the plot.
When not specified, colors from the RColorBrewer palet "Set1" are used.}

\item{highlight_ntile}{Integer. Specifying the ntile at which the plot is annotated
and/or performances are highlighted.}

\item{custom_plot_text}{List. List with customized textual elements for plot. Create a list with defaults
by using \code{\link{customize_plot_text}} and override default values to customize.}
}
\value{
gtable, containing 6 grobs.
}
\description{
Generates a layout containing a number graphical elements, including title, subtitle and the four
model evaluation plots: cumulative gains plot, lift plot, response plot and cumulative response plot.
}
\examples{
data(iris)
# add some noise to iris to prevent perfect models
addNoise <- function(x) round(rnorm(n=100,mean=mean(x),sd=sd(x)),1)
iris_addnoise <- as.data.frame(lapply(iris[1:4], addNoise))
iris_addnoise$Species <- sample(unique(iris$Species),100,replace=TRUE)
iris <- rbind(iris,iris_addnoise)
train_index =  sample(seq(1, nrow(iris)),size = 0.7*nrow(iris), replace = F )
train = iris[train_index,]
test = iris[-train_index,]
#train models using mlr...
trainTask <- mlr::makeClassifTask(data = train, target = "Species")
testTask <- mlr::makeClassifTask(data = test, target = "Species")
mlr::configureMlr() # this line is needed when using mlr without loading it (mlr::)
task = mlr::makeClassifTask(data = train, target = "Species")
lrn = mlr::makeLearner("classif.randomForest", predict.type = "prob")
rf = mlr::train(lrn, task)
lrn = mlr::makeLearner("classif.multinom", predict.type = "prob")
mnl = mlr::train(lrn, task)
#... or train models using caret...
rf = caret::train(Species ~.,data = train, method = "rf")
mnl = caret::train(Species ~.,data = train, method = "multinom",trace = FALSE)
#.. or train models using h2o
h2o::h2o.init()
h2o::h2o.no_progress()
h2o_train = h2o::as.h2o(train)
h2o_test = h2o::as.h2o(test)
gbm <- h2o::h2o.gbm(y = "Species",
                          x = setdiff(colnames(train), "Species"),
                          training_frame = h2o_train,
                          nfolds = 5)
# preparation steps
prepare_scores_and_ntiles(datasets=list("train","test"),
                      dataset_labels = list("train data","test data"),
                      models = list("rf","mnl", "gbm"),
                      model_labels = list("random forest","multinomial logit", "gradient boosting machine"),
                      target_column="Species")
head(scores_and_ntiles)
aggregate_over_ntiles()
plotting_scope()
plot_cumgains()
plot_cumlift()
plot_response()
plot_cumresponse()
plot_all()
}
