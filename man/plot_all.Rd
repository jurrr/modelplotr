% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plottingmodelplots.R
\name{plot_all}
\alias{plot_all}
\title{Create plot with all four evaluation plots}
\usage{
plot_all(data = plot_input, custom_line_colors = NA)
}
\arguments{
\item{data}{Dataframe. Dataframe needs to be created with \code{\link{plotting_scope}}
or else meet required input format.}

\item{custom_line_colors}{Vector of Strings. Specifying colors for the lines in the plot.
When not specified, colors from the RColorBrewer palet "Set1" are used.}
}
\value{
gtable, containing 6 grobs.
}
\description{
Generates a layout containing a number graphical elements, including title, subtitle and the four
model evaluation plots: cumulative gains plot, lift plot, response plot and cumulative response plot.
}
\examples{
data(iris)
# add some noise to iris to prevent perfect models
addNoise <- function(x) round(rnorm(n=100,mean=mean(x),sd=sd(x)),1)
iris_addnoise <- as.data.frame(lapply(iris[1:4], addNoise))
iris_addnoise$Species <- sample(unique(iris$Species),100,replace=TRUE)
iris <- rbind(iris,iris_addnoise)
train_index =  sample(seq(1, nrow(iris)),size = 0.7*nrow(iris), replace = F )
train = iris[train_index,]
test = iris[-train_index,]
trainTask <- mlr::makeClassifTask(data = train, target = "Species")
testTask <- mlr::makeClassifTask(data = test, target = "Species")
mlr::configureMlr() # this line is needed when using mlr without loading it (mlr::)
#estimate models
task = mlr::makeClassifTask(data = train, target = "Species")
lrn = mlr::makeLearner("classif.randomForest", predict.type = "prob")
rf = mlr::train(lrn, task)
lrn = mlr::makeLearner("classif.multinom", predict.type = "prob")
mnl = mlr::train(lrn, task)
prepare_scores_and_deciles(datasets=list("train","test"),
                      dataset_labels = list("train data","test data"),
                      models = list("rf","mnl"),
                      model_labels = list("random forest","multinomial logit"),
                      target_column="Species")
head(scores_and_deciles)
aggregate_over_deciles()
plotting_scope()
plot_cumgains()
plot_cumlift()
plot_response()
plot_cumresponse()
plot_all()
}
